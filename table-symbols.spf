Синтаксис стековых манипуляторов

\ Символы     Символы с префиксами " `       исполняемые токены, числа, содержимое ячеек буфера стека  

a ABS      "a DABS     `a FABS      /[211*22*+p] - пример задания манипулятора, здесь первые 2 символа '[2' - означают, что со стека будут сняты два верхних параметра                       
b C@       "b W@       `b n.0b      и записаны в ячейки 1 и 2 буфера стека.(*)                                        
c Emit     "c          `c FCOS      Затем из буфера на стек помещается содержимое 1 ячейки буфера и еще раз, производится их перемножение, результат остается на стеке,          
d DUP      "d 2DUP     `d FDUP      аналогичные действия производятся с содержимым 2 ячейки буфера, затем квадраты содержимого 1 и 2 ячеек складываются, а из суммы извлекается корень
e ELSE     "e          `e stack0    Таким образом вычислили длину гипотенузы в прямоугольном треугольнике с катетами, с длинами, равными параметрам, взятыми со стека.      
f hFree    "f          `f F>DS       
g CELL     "g 4byte    `g           (*) адрес начала буфера стека превышает адрес текущей вершины стека на 128 байт(32 ячейки)                                
h hAlloc   "h          `h hex       ячейки буфера именуются символами 1 2 3 4 5 6 7 8 9 A B C D E F (HEX) с младших адресов к старшим
i 1+       "i          `i 1-        1..9 A..F - содержимое ячеек буфера                        
j 1+!      "j          `j 1-!       `1..`9 `A..`F - числа 1..9 A..F                                                        
k KEY      "k          `k kbyte      
l LSHIFT   "l DLSHIFT  `l            
m MIN      "m          `m FMIN      : - символ присвоения, верхнее значение снимается со стека и записывается в                      
n NEGATE   "n DNEGATE  `n FNEGATE   указанную за символом : ячейку, например 12+:D(содержимое ячеек 1 2 кладется на стек         
o AGAIN    "o 8byte    `o           суммируется на стеке и сумма снимается со стека и помещается в ячейку D буфера стека.                                                                                                         
p sqrt     "p          `p ).0(      'S  - XT слова обозначенного символом S (исполняемый токен)
q Compare  "q          `q          
r RSHIFT   "r DRSHIFT  `r          
s Search   "s          `s DS>F     
t THEN     "t          `t FTAN         
u hResize  "u          `u          
v EVALUATE "v          `v          
w C!       "w W!       `w          
x DROP     "x 2DROP    `x FDROP         
y odin     "y Dodin    `y          
z 0<>      "z D0<>     `z F0<       
G aDO      "G          `G 
H WITHIN   "H          `H                 
I I        "I          `I F1+      
J J        "J          `J 
K EKEY     "K          `K mbyte  
L LOOP     "L          `L            
M MAX      "M          `M FMAX   
N +LOOP    "N          `N       
O BEGIN    "O          `O          
P DEPTH    "P          `P FPI        
Q LEAVE    "Q          `Q FSQRT 
R REPEAT   "R          `R       
S Spaces   "S          `S
T Type     "T          `T
U UNTIL    "U          `U
V Move     "V          `V
W WHILE    "W          `W
X EXECUTE  "X          `X
Y TRUE     "Y          `Y   
Z 0=       "Z D0=      `Z F0=          
! !        "! 2!       `! F!
@ @        "@ 2@       `@ F@
0 FALSE    "0 Dnull    `0 0! 
% MOD      
& AND      "& DAND 
\ Cr       
$ ?DO      
* *                    `* F* 
+ +        "+ D+       `+ F+
, LITERAL  ", 2LITERAL
- -        "- D-       `- F-                               
. ).(      ". D.       `. F.                               
/ /                    `/ F/                               
< <        "< D<       `< F<                                               
= =        "= D=       `= F=                               
> >        "> D>                           
? IF                                                  
; Exit                 `; RET,                                                    
# <>                                  
^ XOR      "^ DXOR                          
( pref                               
) suff                                       
{ LAMBDA{                                            
| OR       "| DOR                                 
} }LAMBDA                                        
~ INVERT   "~ DINVERT                                          
_ .bl                                                           
                                            

\ пример - сложение строк
\      1  2  3  4     5 6 
: s+ \ a1 u1 a2 u2 -- a u 
/[424+d:6h:5152V352+4V56 ;

\ комментарии: запись /[4 означает, что со стека 4 верхних параметра a1 u1 a2 u2 записываюся соответственно в ячейки 1 2 3 4 буфера стека, 
\ начальный адрес которого на 32 ячейки выше текущей вершины стека.
\      
\ итак /[4 - сбросили параметры 1(a1) 2(u1) 3(a2) 4(u2) со стека в ячейки 1 2 3 4 буфера, затем
\ содержимое 2 и 4 ячеек буфера положили на стек, сложили, результат сложения продублировали на стеке и сбросили в ячейку 6 буфера, затем 
\ сделали ALLOCATE THROW (h) и получили адрес массива размером, равном сумме длин исходных строк, который сбросили со стека в ячейку 5.
\ дальше пересылаем строку a1 u1 в этот выделенный массив, для чего выкладываем на стек адрес строки1 a1(1), адрес выделенного массива (5)
\ и длину пересылаемой строки1 u1(2), затем выполняем MOVE(V), аналогичные действия проводим для второй строки, а затем выкладываем на стек
\ адрес и длину суммарной строки(56).
        































