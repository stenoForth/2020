\ стековые манипуляторы, расширенные операторами (для быстрого прототипирования и отладки программных модулей)

\ фиксированно-именованные локальные переменные на стеке параметров

\ положить адрес выбранного самого нижнего параметра на стеке в регистр ESI 
M: a>s ( n -- выбранное число параметров на стеке )
   1- 4 * S=A S+P DROP ;
M: rs  RS=S ; \  положить ESI на стек возвратов
M: sr  S=RS ; \  снять со стека возвратов и положить в ESI  

\ положить выбранный параметр на вершину стека или в EDX
M: 1>  DUP       A=@S ;    M: <1       D=@S ;  
M: 2>  DUP $  -4 A=@S ;    M: <2 $  -4 D=@S ;  
M: 3>  DUP $  -8 A=@S ;    M: <3 $  -8 D=@S ;  
M: 4>  DUP $  -C A=@S ;    M: <4 $  -C D=@S ;  
M: 5>  DUP $ -10 A=@S ;    M: <5 $ -10 D=@S ;  
M: 6>  DUP $ -14 A=@S ;    M: <6 $ -14 D=@S ;  
M: 7>  DUP $ -18 A=@S ;    M: <7 $ -18 D=@S ;  
M: 8>  DUP $ -1C A=@S ;    M: <8 $ -1C D=@S ;  
M: 9>  DUP $ -20 A=@S ;    M: <9 $ -20 D=@S ;  
M: a>  DUP $ -24 A=@S ;    M: <a $ -24 D=@S ;  
M: b>  DUP $ -28 A=@S ;    M: <b $ -28 D=@S ;  
M: c>  DUP $ -2C A=@S ;    M: <c $ -2C D=@S ;  
M: d>  DUP $ -30 A=@S ;    M: <d $ -30 D=@S ;  
M: e>  DUP $ -34 A=@S ;    M: <e $ -34 D=@S ;  
M: f>  DUP $ -38 A=@S ;    M: <f $ -38 D=@S ;  

\ положить параметр с вершины стека или из EDX в выбранную ячейку стека
M: >1        @S=A DROP ;   M: 1<       @S=D ;
M: >2  $  -4 @S=A DROP ;   M: 2< $  -4 @S=D ;
M: >3  $  -8 @S=A DROP ;   M: 3< $  -8 @S=D ;
M: >4  $  -C @S=A DROP ;   M: 4< $  -C @S=D ;
M: >5  $ -10 @S=A DROP ;   M: 5< $ -10 @S=D ;
M: >6  $ -14 @S=A DROP ;   M: 6< $ -14 @S=D ;
M: >7  $ -18 @S=A DROP ;   M: 7< $ -18 @S=D ;
M: >8  $ -1C @S=A DROP ;   M: 8< $ -1C @S=D ;
M: >9  $ -20 @S=A DROP ;   M: 9< $ -20 @S=D ;
M: >a  $ -24 @S=A DROP ;   M: a< $ -24 @S=D ;
M: >b  $ -28 @S=A DROP ;   M: b< $ -28 @S=D ;
M: >c  $ -2C @S=A DROP ;   M: c< $ -2C @S=D ;
M: >d  $ -30 @S=A DROP ;   M: d< $ -30 @S=D ;
M: >e  $ -34 @S=A DROP ;   M: e< $ -34 @S=D ;
M: >f  $ -38 @S=A DROP ;   M: f< $ -38 @S=D ;

\ сохранить несколько верхних параметров стека в регистрах
: !2 B=@P ;
: !3 B=@P $ 4 C=@P ;
: !4 B=@P $ 4 C=@P $ 8 D=@P ;

\ удалить несколько верхних параметров со стека
: x1 $ 04 Pa ;
: x2 $ 08 Pa ;
: x3 $ 0C Pa ; 
: x4 $ 10 Pa ; 
: x5 $ 14 Pa ; 
: x6 $ 18 Pa ; 
: x7 $ 1C Pa ; 
: x8 $ 20 Pa ;
: x9 $ 24 Pa ;
: xa $ 28 Pa ;
: xb $ 2C Pa ;
: xc $ 30 Pa ;
: xd $ 34 Pa ;
: xe $ 38 Pa ;

\ положить сохраненные в регистрах параметры на вершину стека
: @2 @P=B ;
: @3 @P=B $ 4 @P=C ;
: @4 @P=B $ 4 @P=C $ 8 @P=D ;
 

M: aDO   OVER + SWAP ?DO ;    \ макрос ( BOUND ?DO )
M: I+  ( n -- )  R@ + RP@ ! ; \ макрос: увеличить счетчик цикла на n со стека

: odin  1 ;
: hex   16 ;
: 4cell 32 ; 
: kbyte 1024 ;
: mbyte 1048576 ;

: hAlloc  ALLOCATE THROW ;
: hFree       FREE THROW ;
: hResize   RESIZE THROW ;

I: LAMBDA{ ( -- res xt ) 0 BRANCH, >MARK HERE ;
I: }LAMBDA ( res xt -- ) RET, >R >RESOLVE1 R> LIT, ;

I: FO ` OF ` ` ;  M: EF ENDOF ;

: conv-so   ui! ai! ai i!
  2000 ALLOCATE THROW ao! 2000 uo! ao o! ao uo ERASE
  i+( i 1+ is i )  s( o C! o 1+ is o )  
  BEGIN ''' s  i C@ i+ s i+ ''' s BL s 'F' s 'O' s BL s
        BEGIN i C@ BL > IF i C@ i+ s 0 ELSE i+ BL s 'E' s 'F' s BL s 1 THEN UNTIL
  i ai - ui >
  UNTIL ao o ao -
;
: S:  : IMMEDIATE load-str conv-so DLIT, ` EVALUATE ` ; ;

S: SYM->OPERATOR 
a ABS        A a>          ! !          0 FALSE
b C@         B b>          # FILL       1 1>
c EMIT       C c>          $ ?DO        2 2>
d DUP        D d>          % MOD        3 3>
e ELSE       E e>          & AND        4 4>
f hFree      F f>          ( rs         5 5>
g CELL       H WITHIN      ) sr         6 6>
h hAlloc     G aDO         * *          7 7>
i 1+         I I           + +          8 8>
j 1+!        J J           , LITERAL    9 9>
k KEY        K EKEY        - -
l LSHIFT     L LOOP        . .
m MIN        M MAX         / /
n NEGATE     N +LOOP       < <
o AGAIN      O BEGIN       = =
p DS>F       P DEPTH       > >
q COMPARE    Q LEAVE       ? IF
r RSHIFT     R REPEAT      @ @
s SEARCH     S SPACES      [ a>s         
t THEN       T TYPE                 
u hResize    U UNTIL       ^ XOR
v EVALUATE   V MOVE        _ ACCEPT
w C!         W WHILE       { LAMBDA{
x DROP       X EXECUTE     | OR
y odin       Y TRUE        } }LAMBDA
z 0<>        Z 0=          ~ INVERT                                                                  
;                  

M: XTSYM  ` LAMBDA{ I 1+ C@ CASE SYM->OPERATOR ENDCASE  ` }LAMBDA 1 I+  ;

: DOR     ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A|@P @P|D ;
: DXOR    ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A^@P @P^D ;
: DAND    ( d1 d2 -- d3)  D=@P $ 8 Pa $ -4 A&@P @P&D ;
: DINVERT ( d1 -- d2 )    @P~ A~ ;
: DLSHIFT ( d n -- 'd ) $ 4 D=@P $ 20 C=# C-A D>> C=A @P<< $ 4 @P<< @P|D DROP ;
: DRSHIFT ( d n -- 'd ) D=@P $ 20 C=# C-A D<< C=A @P>> $ 4 @P>> $ 4 @P|D DROP ;
: D0<>    ( d -- f ) D0= INVERT ;
: 1-! ( addr --)   @A-- DROP ;
: Dodin 1. ;
: Dnull 0. ;
: n.0b ( n -- ) 2 BASE ! .0 DECIMAL ;
: n.0h ( n -- ) HEX .0 DECIMAL ;
: .BL ( n -- ) >R 0 <# #S #> R> OVER - 0 MAX DUP IF 0 DO BL EMIT LOOP ELSE DROP THEN TYPE ;
: sqrt ( n -- sqrt )  $ -4 @P=A $ -4 0=@P 0SQRT $ -4 @P=0- $ -4 A=@P ;

\ символы с префиксом " 
S: SYM->DOPERATOR 
a DABS       Z D0=         ! 2!         0 Dnull
b W@                       & DAND        
d 2DUP                     + D+          
g 4cell                    , 2LITERAL    
l DLSHIFT                  - D-         
n DNEGATE                  . D.         
r DRSHIFT                  < D<         
w W!                       = D=         
x 2DROP                    > D>         
y Dodin                    @ 2@         
z D0<>                     ^ DXOR
                           | DOR
                           ~ DINVERT
; 
 
\ символы с префиксом : 
S: SYM->POPERATOR 
1 >1  2 >2  3 >3  4 >4  5 >5  6 >6  7 >7  8 >8  9 >9  A >a  B >b  C >c  D >d  E >e  F >f
d !2  t !3  c !4
;
\ символы с префиксом _ 
S: SYM->XOPERATOR 
1 x1  2 x2  3 x3  4 x4  5 x5  6 x6  7 x7  8 x8  9 x9  A xa  B xb  C xc  D xd  E xe
;
\ символы с префиксом ' 
S: SYM->WOPERATOR 
1 <1  2 <2  3 <3  4 <4  5 <5  6 <6  7 <7  8 <8  9 <9  A <a  B <b  C <c  D <d  E <e  F <f 
d @2  t @3  c @4
;

: SPDROP ( p*n n --)  P+A DROP ;  \ убрать со стека n байтов
: SPMOVE ( p*n addr n --) $ 4 B=aP D=A D+@P L1: $ -4 Da C=@B @D=C $ 4 Ba $ 4 A-# L1 J0<> 2DROP ; \ скопировать n байтов стека в память

\ символы с префиксом `
S: SYM->FOPERATOR
a FABS       I F1+         ! F!
b .BL        K mbyte       * F*
c FCOS       M FMAX        + F+
d FDUP       N NextWord    - F-
h hex        P .0          . F.
i 1-         Q FSQRT       / F/
j 1-!        R >R          = F=
k kbyte      S ,           @ F@
m FMIN       T n.0h        _ ALLOT
n FNEGATE    V SPMOVE    
p DP         X R@        
q sqrt       Z F0= 
r R>               
s C,                     
t n.0b                   
x SPDROP                 
;
                                                                 
: NOTFOUND ( a u -- ) u! a! 
  z19?( C@ '1' ':' WITHIN )  zAF?( C@ 'A' 'G' WITHIN )   
  a C@ '/' = u 1 > AND 0= IF a u NOTFOUND EXIT THEN
  a u + a 1+ 
  ?DO I C@ '`' = I 1+ z19? I 1+ zAF? OR AND 
      IF I 1+ z19? 
         IF   I 1+ C@ '0' - LIT,  
         ELSE I 1+ C@ '7' - LIT,  
         THEN 1 I+
      ELSE I C@ '`' = 
         IF   I 1+ C@ CASE SYM->FOPERATOR ';' FO RET, EF ENDCASE 1 I+ 
         ELSE I C@ '"' = 
              IF   I 1+ C@ CASE SYM->DOPERATOR  ENDCASE 1 I+
              ELSE I C@ ':' =
                   IF   I 1+ C@ CASE SYM->POPERATOR  ENDCASE 1 I+
                   ELSE I C@ ''' =  
                        IF   I 1+ C@ CASE SYM->WOPERATOR  ENDCASE 1 I+
                        ELSE I C@ '_' = 
                             IF   I 1+ C@ CASE SYM->XOPERATOR ENDCASE 1 I+
                             ELSE I C@ CASE SYM->OPERATOR ''' OF XTSYM ENDOF ';' FO EXIT EF '\' FO CR EF ENDCASE
                             THEN
                        THEN
                   THEN                                                                              
              THEN
         THEN
      THEN
  LOOP
;

\ EOF 


\ работа с числами с плав. точкой - односимвольный вариант в отдельном словаре ( n| ) 

0 VALUE XSP 0 VALUE XSF
: ; 0 TO XSP 0 TO XSF POSTPONE ; ; IMMEDIATE

S: S>FOPERATOR
+ F+         - F-         * F*      / F/      a FABS    n FNEGATE i F1+            \ арифметика    
| OR         & AND        ^ XOR     ~ INVERT                                       \ логика
d FDUP       x FDROP      P FDEPTH                                                 \ стек          
< F<         = F=         m FMIN    M FMAX    z F0<     Z F0=     H WITHIN         \ сравнения     
0 FALSE      y odin       Y TRUE                                                   \ константы     
@ F@         ! F!         j 1+!     h hAlloc  f hFree   u hResize V MOVE    # FILL \ память
c FCOS       s FSIN       S FSQRT   T FTAN                                         \ функции 
? IF         e ELSE       t THEN    [ CASE    ( OF      ) ENDOF   ] ENDCASE        \ ветвление
O BEGIN      o AGAIN      U UNTIL   W WHILE   R REPEAT                             \ циклы
$ ?DO        G aDO        I I       J J       Q LEAVE   L LOOP    N +LOOP          \ циклы со счетчиком
p DATA>FLOAT q FLOAT>DATA % DS>F                                                   \ конверсия в числа с плав. точкой
_ ACCEPT     k KEY        K EKEY                                                   \ ввод
. F.         g CELL                                                                \ вывод         
, FLITERAL   v EVALUATE   { LAMBDA{ } }LAMBDA X EXECUTE r RET,                     \ компиляция-исполнение
;
: NOTFOUND ( a u -- ) u! a! XSF sf!
  z18?( C@ '1' '9' WITHIN )
  z19?( C@ '1' ':' WITHIN )
  zAF?( C@ 'A' 'G' WITHIN )
  a z18?                    fz1!
  a    C@ '|'        =      fr1!
  a 1+ C@ '|'        =      fr2!
  fz1 fr2 AND fr1 OR u 1 > AND 0= IF a u NOTFOUND EXIT THEN
  fr1 XSF 0= AND  fz1 fr2 AND OR
  IF  128 ALLOCATE THROW is sf sf TO XSF THEN
  fz1 IF a C@ '0' - DUP 
         >R 0 DO `  FLOAT>DATA LOOP  
         R> 0 DO I 2* CELLS LIT, sf LIT, ` + ` 2! LOOP 
      THEN
  a u + a fz1 IF 2+ ELSE 1+ THEN
  ?DO I z19? I zAF? OR
      IF   I C@  I z19? IF '0' ELSE '7' THEN -  1- 2* CELLS LIT, sf LIT, ` + ` 2@ ` DATA>FLOAT  
      ELSE I C@ ':' =
           IF ` FLOAT>DATA  I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - 1- 2* CELLS LIT,  sf LIT, ` + ` 2! 1 I+  
           ELSE I C@ '`' = I 1+ z19? I 1+ zAF? OR AND
                IF I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - DS>F ` FLITERAL  1 I+                                                     
                ELSE I C@ ''' = I 1+ z19?  I 1+ zAF? OR AND                                  
                     IF   I 1+ C@ I 1+ z19? IF '0' ELSE '7' THEN - 1- CELLS LIT, sf LIT, ` + 1 I+                                                                           
                     ELSE I C@ CASE S>FOPERATOR '\' FO CR EF ';' FO EXIT EF ENDCASE                                                                    
                     THEN
                THEN 
           THEN      
      THEN           
  LOOP               
;

\EOF 
\ как пример использования - манипуляторный вариант конвертора чисел с плавающей запятой из формы 32,123 в форму 32.123е
\ числа с плавающей запятой в виде 3,1415 
\             1 2       3   4   5   6   7   8    9  A  B  C 
: NOTFOUND  ( a u -- ) '0' ':' ',' '.' 'e' '-' ( sq sz pt an ) 
  8/0:90:A0:B0:C12GIb34H?'9jtIb5=?I1-:B'AjtL
  /1b8=?92`i`i=e92`i=tAy=&Z?12 NOTFOUND /;t
  /2iih:C1C2V7C2+w6CB+w0C2i+wC2iv
; 

\ Символы     Символы с префиксами " `         

a ABS         "a DABS         `a FABS        'S  - XT слова обозначенного символом S
b C@          "b W@           `b .BL         '1..'9 'A..'F - адреса ячеек буфера, куда сбрасываются со стека параметры    
c EMIT        "d 2DUP         `c FCOS                        и откуда они кладутся(копируются) на стек
d DUP         "g 4cell        `d FDUP        1..9 A..F - содержимое ячеек буфера
e ELSE        "l DLSHIFT      `f            `1..`9 `A..`F - значения 1..9 A..F
f hFree       "n DNEGATE      `h hex    
g CELL        "r DRSHIFT      `i 1-     
h hAlloc      "w W!           `j 1-!    
i 1+          "x 2DROP        `k kbyte  
j 1+!         "y Dodin        `K mbyte  
k KEY         "z D0<>         `m FMIN   
l LSHIFT      "D              `n FNEGATE
m MIN         "F              `p FPI    
n NEGATE      "X              `q sqrt                                  
o AGAIN       "Z D0=          `Q FSQRT  
p DP          "+ D+           `s FSIN   
q COMPARE     "- D-           `t n.0b   
r RSHIFT      "< D<           `T n.0h   
s SEARCH      "= D=           `x FDROP  
t THEN        "> D>           `z F0<    
u hResize     "@ 2@           `I F1+    
v EVALUATE    "! 2!           `P .0     
w C!          "^ DXOR         `M FMAX   
x DROP        "| DOR          `Z F0=    
y odin        "& DAND         `+ F+     
z 0<>         "~ DINVERT      `- F-     
G aDO         ", 2LITERAL     `* F*     
H WITHIN      ". D.           `/ F/     
I I           "0 Dnull        `< F<     
J J           "h ALLOT        `= F=     
K EKEY                        `@ F@     
L LOOP                        `! F!     
M MAX                         `. F.     
N +LOOP                       `; RET,   
O BEGIN                       `r R>   
P DEPTH                       `R >R
Q LEAVE                       `X R@
R REPEAT 
S SPACES 
T TYPE   
U UNTIL  
V MOVE   
W WHILE  
X EXECUTE
Y TRUE   
Z 0=     
! !      
# FILL   
$ ?DO    
% MOD    
& AND    
( OF     
) ENDOF  
* *      
+ +      
, LITERAL
- -      
. .      
/ /      
; EXIT   
< <      
= =      
> >      
? IF     
@ @      
[ CASE   
\ CR     
] ENDCASE
^ XOR    
_ ACCEPT 
{ LAMBDA{
| OR     
} }LAMBDA
~ INVERT 















